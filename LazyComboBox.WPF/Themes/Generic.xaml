<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:controls="clr-namespace:uTILLIty.Controls.WPF.LazyComboBox">

	<SolidColorBrush x:Key="GlyphBrush" Color="Gray" />

	<Style TargetType="{x:Type controls:LazyComboBox}">
		<Setter Property="Background" Value="{DynamicResource 'ComboBox.Static.Background'}">
			<!--<Setter.Value>
				<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
					<GradientStop Color="#FFF0F0F0" Offset="0.0"/>
					<GradientStop Color="#FFE5E5E5" Offset="1.0"/>
				</LinearGradientBrush>
			</Setter.Value>-->
		</Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource 'ComboBox.Static.Border'}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="ListStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ListView}">
					<Setter Property="ItemsPanel">
						<Setter.Value>
							<ItemsPanelTemplate>
								<VirtualizingStackPanel Orientation="Vertical" IsVirtualizing="True" CanHorizontallyScroll="False"
								                        CanVerticallyScroll="True" />
							</ItemsPanelTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="PopupBorderStyle">
			<Setter.Value>
				<Style TargetType="{x:Type Border}">
					<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
					<Setter Property="BorderThickness" Value="1" />
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
					<Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="TextBoxStyle">
			<Setter.Value>
				<Style TargetType="{x:Type TextBox}">
					<Setter Property="BorderThickness" Value="0" />
					<Setter Property="Padding" Value="0,2" />
					<Setter Property="Background" Value="{DynamicResource 'ComboBox.Static.Editable.Background'}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="DropDownButtonStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ToggleButton}">
					<Setter Property="Foreground" Value="White" />
					<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ToggleButton}">
								<Border Background="{TemplateBinding Background}">
									<Path HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{x:Null}"
									      Data="M0.5,0.5 L3,6.5 5.5,0.5" Stroke="{TemplateBinding Foreground}" Margin="5,0,5,0" Height="7"
									      StrokeThickness="2" Stretch="Fill" />
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Focusable" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:LazyComboBox}">
					<Border x:Name="MainBorder"
					        Background="{TemplateBinding Background}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Border x:Name="PART_SelectedItemColumn" Background="Transparent" Padding="2">
								<TextBlock Text="{TemplateBinding SelectedItemText}" />
							</Border>
							<ProgressBar x:Name="ProgressBar" Grid.Column="1" Visibility="Collapsed" Width="40"
							             Orientation="Horizontal" IsIndeterminate="{TemplateBinding ListUpdating}" />
							<ToggleButton x:Name="PART_DropDownButton" Grid.Column="2" Focusable="false" ClickMode="Press"
							              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							              Style="{TemplateBinding DropDownButtonStyle}" />
							<!--<Border x:Name="PART_DropDownButton" Grid.Column="1" Background="Transparent"
							        Style="{TemplateBinding DropDownButtonStyle}" IsHitTestVisible="True"
							        Width="{TemplateBinding DropDownButtonWidth}">
								<ContentPresenter Style="{TemplateBinding DropDownButtonContentStyle}" />
							</Border>-->
							<TextBox x:Name="PART_TextBox" Grid.Column="0" Visibility="Hidden"
							         Style="{TemplateBinding TextBoxStyle}"
							         Text="{Binding Text, Delay=200, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" />
							<Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2" Focusable="True"
							       MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Grid}}}"
							       Placement="Bottom" MinHeight="60" MaxHeight="200" StaysOpen="True"
							       IsOpen="{TemplateBinding IsDropDownOpen}">
								<Border Style="{TemplateBinding PopupBorderStyle}">
									<ListView x:Name="PART_ListView" MaxHeight="200"
									          Style="{TemplateBinding ListStyle}"
									          ItemsSource="{TemplateBinding ItemsSource}"
									          SelectionMode="Single" />
									<!-- IsSynchronizedWithCurrentItem="True" - causes always first item in list to be selected -->
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="ListUpdating" Value="True">
							<Setter TargetName="ProgressBar" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_DropDownButton" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsEditing" Value="True">
							<Setter TargetName="PART_TextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="MainBorder" Property="BorderBrush"
							        Value="{DynamicResource 'ComboBox.Pressed.Editable.Border'}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>